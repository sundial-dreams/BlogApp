{"version":3,"file":"index.umd.js","sources":["../src/index.ts"],"sourcesContent":["/* necessary for backward compat */\nexport * from 'apollo-client';\nexport * from 'apollo-link';\nexport * from 'apollo-cache-inmemory';\n\nimport { Operation, ApolloLink, Observable } from 'apollo-link';\nimport { HttpLink } from 'apollo-link-http';\nimport { withClientState, ClientStateConfig } from 'apollo-link-state';\nimport { onError, ErrorLink } from 'apollo-link-error';\n\nimport { ApolloCache } from 'apollo-cache';\nimport { InMemoryCache, CacheResolverMap } from 'apollo-cache-inmemory';\nimport gql from 'graphql-tag';\nimport ApolloClient from 'apollo-client';\n\nexport { gql, HttpLink };\n\nexport interface PresetConfig {\n  request?: (operation: Operation) => Promise<void>;\n  uri?: string;\n  credentials?: string;\n  headers?: any;\n  fetch?: GlobalFetch['fetch'];\n  fetchOptions?: HttpLink.Options;\n  clientState?: ClientStateConfig;\n  onError?: ErrorLink.ErrorHandler;\n  cacheRedirects?: CacheResolverMap;\n  cache?: ApolloCache<any>;\n}\n\n// Yes, these are the exact same as the `PresetConfig` interface. We're\n// defining these again so they can be used to verify that valid config\n// options are being used in the `DefaultClient` constructor, for clients\n// that aren't using Typescript. This duplication is unfortunate, and at\n// some point can likely be adjusted so these items are inferred from\n// the `PresetConfig` interface using a Typescript transform at compilation\n// time. Unfortunately, TS transforms with rollup don't appear to be quite\n// working properly, so this will have to be re-visited at some point.\n// For now, when updating the properties of the `PresetConfig` interface,\n// please also update this constant.\nconst PRESET_CONFIG_KEYS = [\n  'request',\n  'uri',\n  'credentials',\n  'headers',\n  'fetch',\n  'fetchOptions',\n  'clientState',\n  'onError',\n  'cacheRedirects',\n  'cache',\n];\n\nexport default class DefaultClient<TCache> extends ApolloClient<TCache> {\n  constructor(config: PresetConfig = {}) {\n    if (config) {\n      const diff = Object.keys(config).filter(\n        key => PRESET_CONFIG_KEYS.indexOf(key) === -1,\n      );\n\n      if (diff.length > 0) {\n        console.warn(\n          'ApolloBoost was initialized with unsupported options: ' +\n            `${diff.join(' ')}`,\n        );\n      }\n    }\n\n    const {\n      request,\n      uri,\n      credentials,\n      headers,\n      fetch,\n      fetchOptions,\n      clientState,\n      cacheRedirects,\n      onError: errorCallback,\n    } = config;\n\n    let { cache } = config;\n\n    if (cache && cacheRedirects) {\n      throw new Error(\n        'Incompatible cache configuration. If providing `cache` then ' +\n          'configure the provided instance with `cacheRedirects` instead.',\n      );\n    }\n\n    if (!cache) {\n      cache = cacheRedirects\n        ? new InMemoryCache({ cacheRedirects })\n        : new InMemoryCache();\n    }\n\n    const stateLink = clientState\n      ? withClientState({ ...clientState, cache })\n      : false;\n\n    const errorLink = errorCallback\n      ? onError(errorCallback)\n      : onError(({ graphQLErrors, networkError }) => {\n          if (graphQLErrors) {\n            graphQLErrors.map(({ message, locations, path }) =>\n              // tslint:disable-next-line\n              console.log(\n                `[GraphQL error]: Message: ${message}, Location: ` +\n                  `${locations}, Path: ${path}`,\n              ),\n            );\n          }\n          if (networkError) {\n            // tslint:disable-next-line\n            console.log(`[Network error]: ${networkError}`);\n          }\n        });\n\n    const requestHandler = request\n      ? new ApolloLink(\n          (operation, forward) =>\n            new Observable(observer => {\n              let handle: any;\n              Promise.resolve(operation)\n                .then(oper => request(oper))\n                .then(() => {\n                  handle = forward(operation).subscribe({\n                    next: observer.next.bind(observer),\n                    error: observer.error.bind(observer),\n                    complete: observer.complete.bind(observer),\n                  });\n                })\n                .catch(observer.error.bind(observer));\n\n              return () => {\n                if (handle) {\n                  handle.unsubscribe();\n                }\n              };\n            }),\n        )\n      : false;\n\n    const httpLink = new HttpLink({\n      uri: uri || '/graphql',\n      fetch,\n      fetchOptions: fetchOptions || {},\n      credentials: credentials || 'same-origin',\n      headers: headers || {},\n    });\n\n    const link = ApolloLink.from([\n      errorLink,\n      requestHandler,\n      stateLink,\n      httpLink,\n    ].filter(x => !!x) as ApolloLink[]);\n\n    // super hacky, we will fix the types eventually\n    super({ cache, link } as any);\n  }\n}\n"],"names":["InMemoryCache","withClientState","onError","ApolloLink","Observable","HttpLink","ApolloClient"],"mappings":"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"}