{"version":3,"file":"static/webpack/static\\development\\pages\\editor.js.e53a45f2e9db90cf93de.hot-update.js","sources":["webpack:///./GQL/Query.js","webpack:///./components/RichEditor/postArticle.js"],"sourcesContent":["import gql from \"graphql-tag\";\r\nimport graphqlClient from \"./GraphQL\";\r\n\r\nexport const QUERY_ARTICLE_BY_CLASSIFY = () => gql(`\r\nquery Article($classify: String!) {\r\n          article(classify: $classify) {\r\n              id\r\n              title\r\n              classify\r\n              text\r\n              publishTime\r\n              readNumber\r\n              likeNumber\r\n              commentNumber\r\n              collectionNumber\r\n              shareNumber\r\n              image\r\n              userId\r\n              nickname\r\n              email\r\n              picture\r\n              name\r\n     }\r\n}`);\r\nexport const getArticleByClassify = (classify) => graphqlClient.query({\r\n  query: QUERY_ARTICLE_BY_CLASSIFY(),\r\n  variables: { classify }\r\n}).then(({ data: { article } }) => article);\r\n\r\n\r\nexport const QUERY_ARTICLE_AND_COMMENT_BY_ID = () => gql(`\r\nquery ArticleAndCommentById($id: ID!) {\r\n          articleById(id: $id) {\r\n              title\r\n              classify\r\n              text\r\n              publishTime\r\n              readNumber\r\n              likeNumber\r\n              commentNumber\r\n              collectionNumber\r\n              shareNumber\r\n              image\r\n              userId\r\n              nickname\r\n              email\r\n              picture\r\n              name\r\n              position\r\n              company\r\n              description\r\n          }\r\n          commentByArticleId(id: $id){\r\n              userId\r\n              text\r\n              nickname\r\n              articleId\r\n              time\r\n              id\r\n              picture\r\n          }\r\n          \r\n}`\r\n);\r\n\r\nexport const getArtCommById = (id) => graphqlClient.query({\r\n  query: QUERY_ARTICLE_AND_COMMENT_BY_ID(),\r\n  variables: { id }\r\n}).then(({ data }) => data);\r\n\r\nexport const QUERY_USER_BY_ID = () => gql(`\r\nquery User($id: ID!) {\r\n    user(id: $id){\r\n      id\r\n      email\r\n      nickname\r\n      picture\r\n      position\r\n      company\r\n      description\r\n      text\r\n    }\r\n}`);\r\n\r\nexport const getUserById = (id) => graphqlClient.query({\r\n  query: QUERY_USER_BY_ID(),\r\n  variables: { id }\r\n}).then(({ data: { id } }) => id);\r\n\r\n\r\nexport const QUERY_CLASSIFY = () => gql(`\r\nquery{\r\n    classify{\r\n      name\r\n      description\r\n      picture\r\n    }\r\n}`);\r\nexport const getAllClassify = () => graphqlClient.query({\r\n  query: QUERY_CLASSIFY(),\r\n}).then(({ data }) => data);\r\n\r\nexport const QUERY_LABEL_BY_CLASSIFY = () => gql(`\r\nquery  LabelByClassify($classify: String!) {\r\n          labelByClassify(classify: $classify){\r\n            id\r\n            name\r\n            classify\r\n            description\r\n            picture\r\n      } \r\n}`);\r\nexport const getLabelByClassify = (classify) => graphqlClient.query({\r\n  query: QUERY_LABEL_BY_CLASSIFY(),\r\n  variables: { classify }\r\n}).then(({ data: { labelByClassify } }) => labelByClassify);\r\n\r\nexport const QUERY_CLASSIFY_AND_LABEL = () => gql(`\r\nquery labelByClassify($defaultClassify: String!) {\r\n      labelByClassify(classify: $defaultClassify){\r\n        id\r\n        name\r\n      } \r\n      classify{\r\n         name\r\n      }\r\n}`);\r\n\r\nexport const getClassifyLabel = (defaultClassify) => graphqlClient.query({\r\n  query: QUERY_CLASSIFY_AND_LABEL(),\r\n  variables: { defaultClassify }\r\n}).then(({ data}) => data);\r\n\r\nexport const QUERY_COMMENT_BY_ArticleId = () => gql(`\r\nquery CommentByArticleId($id: ID){\r\n  commentByArticleId(id: $id){\r\n    userId\r\n    text\r\n    nickname\r\n    articleId\r\n    time\r\n    id\r\n    picture\r\n  }\r\n}`);\r\nexport const getCommByArtId = (id) => graphqlClient.query({\r\n  query: QUERY_COMMENT_BY_ArticleId(),\r\n  variables: { id }\r\n}).then(({ data: { commentByArticleId } }) => commentByArticleId);\r\n\r\nexport const QUERY_REPLY_BY_COMMENT_ID = () => gql(`\r\nquery ReplyByComment{\r\n  replyByComment(id: $id) {\r\n    id\r\n    userId\r\n    commentId\r\n    text\r\n    time\r\n  }\r\n}`);\r\nexport const getReplyByCommId = (id) => graphqlClient.query({\r\n  query: QUERY_REPLY_BY_COMMENT_ID(),\r\n  variables: { id }\r\n}).then(({ data: { replyByComment } }) => replyByComment);","import React, { Component } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport less from \"./style.less\";\r\nimport { mergeClassName } from \"utils/utils\";\r\nimport gqlClient from \"GQL/GraphQL\";\r\nimport {\r\n  QUERY_CLASSIFY_AND_LABEL,\r\n  QUERY_LABEL_BY_CLASSIFY,\r\n  getClassifyLabel,\r\n  getLabelByClassify,\r\n  getAllClassify\r\n} from \"GQL/Query\";\r\n\r\nconst defaultClassify = \"前端\";\r\n\r\nclass PostMenu extends Component {\r\n  constructor (props) {\r\n    super(props);\r\n  }\r\n\r\n  render () {\r\n    const {\r\n      isShowMenu,\r\n      initState,\r\n      handleSelectClassify,\r\n      handleSelectLabel,\r\n      currentClassify,\r\n      currentLabel,\r\n      handlePost\r\n    } = this.props;\r\n    return (\r\n      <div className={ mergeClassName(less[\"post-selection\"], isShowMenu && less[\"show-menu\"]) }>\r\n        <h2>发布文章</h2>\r\n        <h3>分类</h3>\r\n        <div className={ less[\"classify\"] }>\r\n          {\r\n            initState.classify ? initState.classify.map(({ name }, i) =>\r\n              <span className={ currentClassify === i ? less.check : \"\" }\r\n                    onClick={ () => {\r\n                      handleSelectClassify(name)\r\n                    } }>{ name }</span>) : \"\"\r\n          }\r\n        </div>\r\n        <h3>标签</h3>\r\n        <div className={ less[\"label\"] }>\r\n          {\r\n            initState.label ? initState.label.map(({ name }, i) =>\r\n              <span className={ currentLabel === i ? less[\"label-check\"] : \"\" } onClick={ () => {\r\n                handleSelectLabel(name);\r\n              } }>{ name }<i className=\"fa fa-check\"/></span>) : \"\"\r\n          }\r\n        </div>\r\n        <button onClick={ handlePost }>发布</button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nPostMenu.propTypes = {\r\n  isShowMenu: PropTypes.bool.isRequired,\r\n  initState: PropTypes.object,\r\n  handleSelectClassify: PropTypes.func,\r\n  handleSelectLabel: PropTypes.func,\r\n  currentClassify: PropTypes.number,\r\n  currentLabel: PropTypes.number,\r\n  handlePost: PropTypes.func\r\n};\r\n\r\n\r\nexport default class Post extends Component {\r\n\r\n  constructor (props) {\r\n    super(props);\r\n    this.state = {\r\n      isShowMenu: false,\r\n      classify: [],\r\n      label: [],\r\n      currentClassify: 0,\r\n      currentLabel: 0\r\n    };\r\n    this.handlePost = this.handlePost.bind(this);\r\n    this.handleSelectClassify = this.handleSelectClassify.bind(this);\r\n    this.handleSelectLabel = this.handleSelectLabel.bind(this);\r\n  }\r\n\r\n  handleSelectClassify (name) {\r\n    const classify = this.state.classify.map(({ name }) => name);\r\n    this.setState({\r\n      currentClassify: classify.indexOf(name)\r\n    });\r\n    getLabelByClassify(name).then(label => this.setState({ label }));\r\n    // gqlClient.query({\r\n    //   query: QUERY_LABEL_BY_CLASSIFY(),\r\n    //   variables: { classify: name }\r\n    // }).then(({ data }) => data)\r\n    //   .then(({ labelByClassify }) => {\r\n    //     this.setState({ label: labelByClassify })\r\n    //   })\r\n  }\r\n\r\n  handleSelectLabel (name) {\r\n    const label = this.state.label.map(({ name }) => name);\r\n    this.setState({\r\n      currentLabel: label.indexOf(name)\r\n    });\r\n  }\r\n\r\n  handlePost () {\r\n    const { classify, currentClassify, label, currentLabel } = this.state;\r\n    const currentClassifyName = classify.map(({ name }) => name)[currentClassify];\r\n    const currentLabelId = label.map(({ id }) => id)[currentLabel];\r\n    this.props.handlePost(currentClassifyName, currentLabelId);\r\n  }\r\n\r\n  componentDidMount () {\r\n    getAllClassify().then(\r\n      ({ labelByClassify, classify }) => {\r\n        console.log(\"labelByClassify\",labelByClassify, classify);\r\n        this.setState({\r\n          classify,\r\n          label: labelByClassify\r\n        })\r\n      }\r\n    );\r\n    // gqlClient.query({\r\n    //   query: QUERY_CLASSIFY_AND_LABEL(),\r\n    //   variables: { defaultClassify }\r\n    // }).then(({ data }) => data).then(({ labelByClassify, classify }) => {\r\n    //   console.log(labelByClassify, classify);\r\n    //   this.setState({\r\n    //     classify,\r\n    //     label: labelByClassify\r\n    //   })\r\n    // })\r\n  }\r\n\r\n  render () {\r\n    const { isShowMenu } = this.state;\r\n    return (\r\n      <div className={ mergeClassName(less[\"post-article\"], isShowMenu && less.active) }>\r\n        <button onClick={\r\n          () => this.setState(state => ({\r\n            isShowMenu: !state.isShowMenu\r\n          }))\r\n        }>\r\n          POST <i className={ isShowMenu ? \"fa fa-caret-up\" : \"fa fa-caret-down\" }/>\r\n        </button>\r\n        <div className={ less[\"post-menu\"] }>\r\n          <PostMenu isShowMenu={ isShowMenu }\r\n                    initState={ { classify: this.state.classify, label: this.state.label } }\r\n                    handleSelectClassify={ this.handleSelectClassify }\r\n                    handleSelectLabel={ this.handleSelectLabel }\r\n                    currentLabel={ this.state.currentLabel }\r\n                    currentClassify={ this.state.currentClassify }\r\n                    handlePost={ this.handlePost }\r\n          />\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nPost.propTypes = {\r\n  handlePost: PropTypes.func\r\n};\r\n"],"mappings":"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","sourceRoot":""}