{"version":3,"file":"static/webpack/static\\development\\pages\\editor.js.625ba09d8a1899acf8f8.hot-update.js","sources":["webpack:///./GQL/Mutation.js"],"sourcesContent":["import gql from \"graphql-tag\";\r\nimport graphqlClient from \"./GraphQL\";\r\n\r\nexport const LOGIN = () => gql(`\r\nmutation Login($email: String!, $password: String!){\r\n login(email: $email, password: $password) {\r\n    err\r\n    message\r\n    response {\r\n      id\r\n      email\r\n      nickname\r\n      picture\r\n      position\r\n      company\r\n      description\r\n      text\r\n    }\r\n }\r\n}`);\r\nexport const toLogin = (email, password) => graphqlClient.mutate({\r\n  mutation: LOGIN(),\r\n  variables: { email, password }\r\n}).then(({ data: { login } }) => login);\r\n\r\nexport const REGISTER = () => gql(`\r\nmutation CreateUser($nickname: String!, $password: String!, $email: String!){\r\n   createUser(input: {\r\n     nickname: $nickname\r\n     password: $password\r\n     email: $email\r\n   }){\r\n     err\r\n     message\r\n     response {\r\n      id\r\n      email\r\n      nickname\r\n      picture\r\n     }\r\n   }\r\n}`);\r\nexport const toRegister = (nickname, password, email) => graphqlClient.mutate({\r\n  mutation: REGISTER(),\r\n  variables: { input: { nickname, password, email } }\r\n}).then(({ data: { createUser } }) => createUser);\r\nexport const POST_ARTICLE = () => gql(`\r\nmutation CreateArticle($input: InputArticle!){\r\n     createArticle(input: $input){\r\n          err\r\n          message\r\n          response {\r\n            id\r\n          }\r\n       }\r\n}`);\r\n\r\nexport const toPostArticle = (article) => graphqlClient.mutate({\r\n  mutation: POST_ARTICLE(),\r\n  variables: { input: article }\r\n}).then(({ data: { createArticle } }) => createArticle);\r\n\r\nexport const CREATE_COMMENT = () => gql(`\r\nmutation CreateComment($input: InputComment!){\r\n  createComment(input: $input){\r\n    err\r\n    message\r\n  }\r\n}`);\r\nexport const toCreateComment = (comment) => graphqlClient.mutate({\r\n  mutation: CREATE_COMMENT(),\r\n  variables: { input: comment }\r\n}).then(({ data: { createComment } }) => createComment);\r\n\r\nexport const LIKE_ARTICLE = () => gql(`\r\nmutation ArticleLike($id: ID!){\r\n  articleLike(id: $id){\r\n    err\r\n    message\r\n  }\r\n}`);\r\n\r\nexport const toLikeArticle = (id) => graphqlClient.mutate({\r\n  mutation: LIKE_ARTICLE(),\r\n  variables: { id }\r\n}).then(({ data: { articleLike } }) => articleLike);"],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AAAA;AAAA;AAiBA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAFA;AAGA;AAAA;AAAA;AAHA;AAKA;AAAA;AAAA;AAiBA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAFA;AAGA;AAAA;AAAA;AAHA;AAIA;AAAA;AAAA;AAWA;AAAA;AACA;AACA;AAAA;AAAA;AAFA;AAGA;AAAA;AAAA;AAHA;AAKA;AAAA;AAAA;AAOA;AAAA;AACA;AACA;AAAA;AAAA;AAFA;AAGA;AAAA;AAAA;AAHA;AAKA;AAAA;AAAA;AAQA;AAAA;AACA;AACA;AAAA;AAAA;AAFA;AAGA;AAAA;AAAA;AAHA;;;;A","sourceRoot":""}