{"version":3,"file":"static/webpack/static\\development\\pages\\view.js.8138313f4813c20d2a06.hot-update.js","sources":["webpack:///./components/View/comment.js"],"sourcesContent":["import React, { Component } from \"react\";\r\nimport less from \"./style.less\";\r\nimport { UserPicture } from \"components/component/component\";\r\nimport PropTypes from \"prop-types\";\r\nimport { mergeClassName } from \"utils/utils\";\r\nimport { connect } from \"react-redux\";\r\nimport { CREATE_COMMENT, toCreateComment } from \"GQL/Mutation\";\r\nimport { QUERY_REPLY_BY_COMMENT_ID, getReplyByCommId } from \"GQL/Query\";\r\nimport gqlClient from \"GQL/GraphQL\";\r\n\r\nconst ReplyItem = props => {\r\n  return (\r\n    <div className={ less[\"reply-item\"] }>\r\n      <div className={ less[\"user-avatar\"] }>\r\n        <UserPicture picture={ \"/static/img/test-head.jpg\" } size={ 40 }/>\r\n        <span>dpf</span>\r\n      </div>\r\n      <div className={ less[\"reply-body\"] }>\r\n        <span>\r\n          te\r\n        </span>\r\n        <span>\r\n          2018-01-04\r\n        </span>\r\n      </div>\r\n    </div>\r\n  )\r\n};\r\n\r\nReplyItem.props = {};\r\n\r\nclass ReplyComment extends Component {\r\n  constructor (props) {\r\n    super(props);\r\n    this.state = {\r\n      active: false,\r\n      text: \"\"\r\n    };\r\n  }\r\n\r\n  render () {\r\n    return (\r\n      <div className={ mergeClassName(less[\"reply-comment\"], this.state.active && less[\"reply-active\"]) }>\r\n        <button onClick={ () => this.setState(state => ({ active: !state.active })) }>\r\n          回复\r\n        </button>\r\n        <div className={ less[\"reply-textarea\"] }>\r\n          <textarea placeholder=\"write reply...\" value={ this.state.text }\r\n                    onChange={ e => this.setState({ text: e.target.value }) }/>\r\n          <button>\r\n            发表\r\n          </button>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nclass CommentItem extends Component {\r\n  constructor (props) {\r\n    super(props);\r\n    this.state = {\r\n      reply: []\r\n    }\r\n  }\r\n\r\n  componentDidMount () {\r\n    getReplyByCommId(this.props.comment.id)\r\n      .then((reply) => {\r\n        this.setState({ reply })\r\n      });\r\n\r\n    // gqlClient.query({\r\n    //   query: QUERY_REPLY_BY_COMMENT_ID(),\r\n    //   variables: { id: this.props.comment.id }\r\n    // }).then(({ data: { replyByComment } }) => replyByComment)\r\n    //   .then(reply => {\r\n    //     this.setState({\r\n    //       reply\r\n    //     })\r\n    //   })\r\n  }\r\n\r\n  render () {\r\n    const { comment, userId } = this.props;\r\n    return (\r\n      <div className={ less[\"comment-item\"] }>\r\n        <div className={ less[\"comment-head\"] }>\r\n          <UserPicture picture={ comment.picture } size={ 50 } url={ { pathname: \"/user\", id: userId } }/>\r\n          <span>\r\n        { comment.nickname }\r\n      </span>\r\n          <span>\r\n        { new Date(parseInt(comment.time)).toDateString() }\r\n      </span>\r\n        </div>\r\n        <div className={ less[\"comment-body\"] }>\r\n      <span>\r\n      { comment.text }\r\n      </span>\r\n        </div>\r\n        <div className={ less[\"reply\"] }>\r\n          <ul>\r\n            {\r\n              this.state.reply.map((v, i) => <li key={ i }>\r\n                <ReplyItem/>\r\n              </li>)\r\n            }\r\n          </ul>\r\n        </div>\r\n        <div className={ less[\"comment-reply\"] }>\r\n          <ReplyComment/>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nCommentItem.propTypes = {\r\n  comment: PropTypes.object,\r\n  userId: PropTypes.string\r\n};\r\n\r\nclass WriteComment extends Component {\r\n  constructor (props) {\r\n    super(props);\r\n    this.state = {\r\n      active: false,\r\n      text: \"\"\r\n    };\r\n    this.handleChange = this.handleChange.bind(this);\r\n    this.handlePost = this.handlePost.bind(this);\r\n  }\r\n\r\n  handleChange (e) {\r\n    this.setState({\r\n      text: e.target.value\r\n    })\r\n  }\r\n\r\n  handlePost () {\r\n    const { handlePost } = this.props;\r\n    this.setState({\r\n      active: false,\r\n      text: \"\"\r\n    });\r\n    handlePost(this.state.text)\r\n  }\r\n\r\n  render () {\r\n\r\n    return (\r\n      <div className={ mergeClassName(less[\"write-comment\"], this.state.active && less[\"write-comment-active\"]) }>\r\n        <button onClick={ () => {\r\n          this.setState(state => ({ active: !state.active }))\r\n        } }>\r\n          写评论\r\n        </button>\r\n        <div className={ less[\"input-comment\"] }>\r\n          <textarea placeholder=\"write some comment...\"\r\n                    onChange={ this.handleChange }\r\n                    value={ this.state.text }/>\r\n          <button className={ less[\"post-comment\"] }\r\n                  onClick={ this.handlePost }\r\n          >\r\n            发表\r\n          </button>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nWriteComment.propTypes = {\r\n  handlePost: PropTypes.func\r\n};\r\n\r\nclass Comment extends Component {\r\n  constructor (props) {\r\n    super(props);\r\n    this.state = {\r\n      comments: []\r\n    };\r\n    this.handlePost = this.handlePost.bind(this);\r\n  }\r\n\r\n  componentDidMount () {\r\n    this.setState({\r\n      comments: this.props.comments.sort((a, b) => parseInt(b.time) - parseInt(a.time))\r\n    })\r\n  }\r\n\r\n  handlePost (commentText) {\r\n    const { picture, nickname, id } = this.props.userState;\r\n    const { articleId } = this.props;\r\n    const now = Date.now().toString();\r\n    toCreateComment({ time: now, text: commentText, userId: id, articleId })\r\n      .then(({err, message}) => {\r\n        if (err) return \"err\";\r\n\r\n        this.setState(state => ({\r\n          comments: [...state.comments, {\r\n            picture,\r\n            nickname,\r\n            time: now,\r\n            text: commentText\r\n          }].sort((a, b) => parseInt(b.time) - parseInt(a.time))\r\n      }))});\r\n    /*gqlClient.mutate({\r\n      mutation: CREATE_COMMENT(),\r\n      variables: {\r\n        input: { time: now, text: commentText, userId: id, articleId }\r\n      }\r\n    })\r\n      .then(({ data }) => data)\r\n      .then(({ err, message }) => {\r\n        console.log(err, message);\r\n        if (err) return \"err\";\r\n        this.setState(state => ({\r\n          comments: [...state.comments, {\r\n            picture,\r\n            nickname,\r\n            time: now,\r\n            text: commentText\r\n          }].sort((a, b) => parseInt(b.time) - parseInt(a.time))\r\n        }));\r\n      })*/\r\n  }\r\n\r\n  render () {\r\n\r\n    const { userState: { isLogin } } = this.props;\r\n    return (\r\n      <div className={ less[\"article-comment\"] }>\r\n        <h3>Comment\r\n          <span>\r\n            {\r\n              isLogin ? <WriteComment handlePost={ this.handlePost }/> : \"\"\r\n            }\r\n        </span>\r\n        </h3>\r\n        <ul>\r\n          {\r\n            this.state.comments.map((v, i) => <li key={ i }>\r\n              <CommentItem comment={ v } userId={ this.props.userId }/>\r\n            </li>)\r\n          }\r\n        </ul>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nComment.propTypes = {\r\n  comments: PropTypes.array,\r\n  userState: PropTypes.object,\r\n  articleId: PropTypes.string,\r\n  userId: PropTypes.string\r\n};\r\n\r\nexport default connect(state => ({ userState: state.user }))(Comment)"],"mappings":"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","sourceRoot":""}